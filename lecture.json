[
  {
    "nom": "Prévision ARIMA",
    "description": "Prévision à court ou moyen terme du prix d'un actif avec capture de la tendance et de la saisonnalité.",
    "niveau": "intermédiaire",
    "source": "Time Series Forecasting in Python (Peixeiro), chap. 5",
    "inputs": ["Prix historiques", "Paramètres ARIMA (p, d, q)"],
    "outputs": ["Prévision pour N périodes", "Intervalles de confiance"],
    "usage": "Anticiper le prix futur d'un ETF ou d'une action. Ajuster l'allocation ou détecter une inversion.",
    "avantages": ["Modèle robuste pour la prévision pure", "Interprétation facile"],
    "limites": ["Paramétrage parfois long (p, d, q)", "Moins efficace sur séries très volatiles ou non stationnaires"],
    "conseil_interpretation": "Regarde si la prévision ARIMA confirme la tendance récente. Ne prends pas de décision sur un seul point : croise avec d'autres signaux.",
    "exemple": "Prévoir le cours du CW8 sur 6 mois pour anticiper une rotation sectorielle.",
    "extrait_python": "from statsmodels.tsa.arima.model import ARIMA\nmodel = ARIMA(data, order=(1,1,1)).fit()\nforecast = model.forecast(steps=6)"
  },
  {
    "nom": "Lissage exponentiel (Holt-Winters)",
    "description": "Prévision simple et adaptative (court terme ou saisonnalité).",
    "niveau": "débutant",
    "source": "Time Series Forecasting in Python, chap. 3",
    "inputs": ["Données historiques", "Paramètres alpha, beta, gamma"],
    "outputs": ["Prévision N périodes", "Tendance lissée"],
    "usage": "Anticiper la tendance de valeurs volatiles ou saisonnières (ex : énergie, matières premières).",
    "avantages": ["Rapide, peu de paramètres", "Marche bien sur tendance courte"],
    "limites": ["Moins précis sur longue période", "N'explique pas les causes sous-jacentes"],
    "conseil_interpretation": "Si la tendance lissée s'inverse, c'est souvent un signal d'opportunité. Combine avec analyse fondamentale.",
    "exemple": "Prévoir le pic saisonnier d’ENGIE ou TotalEnergies.",
    "extrait_python": "from statsmodels.tsa.holtwinters import ExponentialSmoothing\nmodel = ExponentialSmoothing(data, trend='add', seasonal='add', seasonal_periods=12).fit()\nforecast = model.forecast(steps=3)"
  },
  {
    "nom": "Prophet (Facebook/Meta)",
    "description": "Prévision automatique intégrant tendance, saisonnalité, effets spéciaux (macro, dividendes, krach).",
    "niveau": "intermédiaire",
    "source": "Machine Learning for Time-Series, chap. 5",
    "inputs": ["DataFrame dates (ds), valeurs (y)"],
    "outputs": ["Prévision multi-horizon", "Intervalles de confiance"],
    "usage": "Prévoir le cours d’un ETF, tenir compte de la saisonnalité et des événements exceptionnels.",
    "avantages": ["Très puissant pour cycles complexes", "Gère les trous de données, jours fériés, effets macro"],
    "limites": ["Peut sur-réagir aux outliers", "Nécessite du nettoyage de données"],
    "conseil_interpretation": "Si Prophet prédit une hausse synchronisée avec le DCA, augmente l’apport mensuel.",
    "exemple": "Prévoir le rebond post-dividende sur Sanofi.",
    "extrait_python": "from prophet import Prophet\nm = Prophet()\nm.fit(df)\nfuture = m.make_future_dataframe(periods=6, freq='M')\nforecast = m.predict(future)"
  },
  {
    "nom": "Détection de tendance (moyenne mobile croisée)",
    "description": "Détecter retournements haussiers ou baissiers avec la croisée de deux moyennes mobiles.",
    "niveau": "débutant",
    "source": "Time Series Forecasting in Python, chap. 2",
    "inputs": ["Prix historiques", "Fenêtres MM courte et longue"],
    "outputs": ["Signal achat/vente"],
    "usage": "Renforcer ou alléger un actif selon la tendance (ex: S&P500, Nasdaq).",
    "avantages": ["Lecture visuelle immédiate", "Appliqué partout (ETF, actions)"],
    "limites": ["Beaucoup de faux signaux sur marchés très volatils"],
    "conseil_interpretation": "N'achète jamais uniquement sur un croisement MM, valide avec le volume ou RSI.",
    "exemple": "Alléger CW8 si MM20 < MM50 pendant 3 semaines.",
    "extrait_python": "mm20 = data.rolling(20).mean(); mm50 = data.rolling(50).mean(); signal = (mm20 > mm50)"
  },
  {
    "nom": "Détection d'anomalies (Isolation Forest)",
    "description": "Identifier les comportements atypiques ou ruptures de marché.",
    "niveau": "avancé",
    "source": "Machine Learning for Time-Series, chap. 6",
    "inputs": ["Données prix, volume", "Contamination"],
    "outputs": ["Indices d’anomalies", "Score d’anomalie"],
    "usage": "Alerter ou suspendre un investissement en cas d’anomalie majeure (flash crash, manipulation, scandale).",
    "avantages": ["Repère les ruptures invisibles à l'œil nu", "Idéal pour les paniers d'actifs"],
    "limites": ["Paramétrage délicat sur petits volumes", "Parfois trop sensible aux outliers"],
    "conseil_interpretation": "Si anomalie détectée, bloque le DCA sur l’actif le temps d’investiguer.",
    "exemple": "Alerte automatique sur TTE.PA lors d’un gap de 8% hors news.",
    "extrait_python": "from sklearn.ensemble import IsolationForest; model = IsolationForest(contamination=0.01); model.fit(X); preds = model.predict(X)"
  },
  {
    "nom": "Backtest DCA (Dollar Cost Averaging)",
    "description": "Simuler la performance d’une stratégie DCA sur n'importe quel ETF/action.",
    "niveau": "débutant",
    "source": "Time Series Forecasting in Python, chap. 7",
    "inputs": ["Prix historiques", "Montant & fréquence d’investissement"],
    "outputs": ["Courbe de capital", "Rendement annualisé", "Drawdown"],
    "usage": "Savoir ce qu'aurait donné un investissement régulier sur le MSCI World ou S&P500 depuis 10 ans.",
    "avantages": ["Montre la puissance des intérêts composés", "Prouve la robustesse du DCA face à la volatilité"],
    "limites": ["Ne prend pas en compte les frais réels, fiscalité, slippage"],
    "conseil_interpretation": "Regarde la courbe de drawdown pour ajuster la tolérance au risque.",
    "exemple": "Comparer un DCA sur CW8 vs un achat unique en 2013.",
    "extrait_python": "capital=0; parts=0; for mois in range(len(prix)): capital += 150; parts += 150/prix[mois]; valeur = parts * prix[-1]"
  },
  {
    "nom": "Décomposition STL (saisonnalité/tendance)",
    "description": "Décomposer une série en tendance, saisonnalité et bruit.",
    "niveau": "intermédiaire",
    "source": "Machine Learning for Time-Series, chap. 4",
    "inputs": ["Données de prix", "Périodicité"],
    "outputs": ["Courbe de tendance", "Effet saisonnier", "Résidu"],
    "usage": "Détecter les mois de surperformance/sous-performance de certains secteurs.",
    "avantages": ["Lisibilité des cycles", "Détection rapide des anomalies récurrentes"],
    "limites": ["N'explique pas le 'pourquoi' d’une saisonnalité", "Parfois instable si peu de données"],
    "conseil_interpretation": "Renforce ou réduis l’exposition avant/pendant les cycles de sous-perf.",
    "exemple": "Décomposer INRG.L pour trouver les meilleures périodes d’achat sur l’énergie verte.",
    "extrait_python": "from statsmodels.tsa.seasonal import STL; result=STL(data, period=12).fit(); trend=result.trend"
  },
  {
    "nom": "Score quantitatif multi-critères",
    "description": "Classer les actifs du portefeuille selon des critères objectifs (rendement, volatilité, dividende…).",
    "niveau": "intermédiaire",
    "source": "Machine Learning for Time-Series, chap. 8",
    "inputs": ["Scores de rendement, volatilité, momentum, etc."],
    "outputs": ["Ranking d’actifs", "Répartition optimale"],
    "usage": "Optimiser la répartition chaque mois selon la perf réelle des ETF/actions.",
    "avantages": ["Objectivité totale", "Adaptable à tes critères"],
    "limites": ["N’intègre pas les critères macro/fondamentaux sauf si ajoutés"],
    "conseil_interpretation": "Change la pondération des critères selon la phase de marché.",
    "exemple": "Réduire la pondération de l’énergie si volatilité supérieure à 30%.",
    "extrait_python": "score = 0.5*perf_1an + 0.3*momentum + 0.2*dividende - 0.2*volatilite"
  },
  {
    "nom": "Prévision deep learning (LSTM)",
    "description": "Prévoir les prix futurs à partir de modèles séquentiels (captation de patterns complexes et dépendances longues).",
    "niveau": "avancé",
    "source": "Machine Learning for Time-Series, chap. 9",
    "inputs": ["Prix historiques", "Hyperparamètres LSTM"],
    "outputs": ["Prévisions N périodes", "Intervalle d’incertitude"],
    "usage": "Anticiper des retournements ou accélérations sur des actifs très volatils.",
    "avantages": ["Très efficace sur séries non linéaires et bruitées", "S’adapte en continu"],
    "limites": ["Nécessite plus de données et d’expertise pour l’entraînement"],
    "conseil_interpretation": "Croise les signaux LSTM avec les signaux MM et ARIMA pour valider un signal fort.",
    "exemple": "Tenter d’anticiper une forte correction sur le Nasdaq.",
    "extrait_python": "# préparation des séquences puis model.predict(X_test) sur Keras/Tensorflow"
  }
]
